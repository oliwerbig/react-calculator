{"version":3,"sources":["layout/Calculator/Calculator.js","layout/Calculator/Keypad/KeypadRow/KeypadRow.js","components/Button/Button.js","components/Button/LargeButton/LargeButton.js","layout/Calculator/Keypad/Keypad.js","layout/Calculator/Screen/ResultScreen/ResultScreen.js","layout/Calculator/Screen/ComputationScreen/ComputationScreen.js","layout/Calculator/Screen/Screen.js","App.js","serviceWorker.js","index.js"],"names":["Calculator","state","equation","result","onButtonPress","event","pressedButton","target","innerHTML","clear","indexOf","evalResult","eval","Number","isInteger","toFixed","setState","error","alert","trim","substr","length","this","className","React","Component","keypadRow","props","children","button","classes","type","push","join","onClick","largeButton","Button","keypad","KeypadRow","LargeButton","resultScreen","computationScreen","screen","ResultScreen","ComputationScreen","app","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.0e89db7d.chunk.js","sourcesContent":["import React from 'react';\n\nimport Screen from './Screen/Screen';\nimport Keypad from './Keypad/Keypad';\n\nclass Calculator extends React.Component {\n    state = {\n        equation: '',\n        result: 0\n    }\n\n    onButtonPress = event => {\n        let equation = this.state.equation;\n        const pressedButton = event.target.innerHTML;\n\n        if(pressedButton === 'C') {\n            return this.clear();\n        } else if((pressedButton >= '0' && pressedButton <= '9') || pressedButton === '.') {\n            equation += pressedButton;\n        } else if(['+', '-', '*', '/', '%'].indexOf(pressedButton) !== -1) {\n            equation += ' ' + pressedButton + ' ';\n        } else if(pressedButton === '=') {\n            try {\n                const evalResult = eval(equation);\n                const result = Number.isInteger(evalResult)? evalResult : evalResult.toFixed(2);\n                this.clear();\n                this.setState({result});\n            } catch (error) {\n                alert('Invalid Mathematical Equation');\n            }\n        } else {\n            equation = equation.trim();\n            equation = equation.substr(0, equation.length - 1);\n        }\n\n        this.setState({equation: equation});\n    }\n\n    clear() {\n        this.setState({equation: '', result: 0});\n    }\n\n    render() {\n        return(\n            <main className=\"calculator\">\n                <Screen \n                    equation={this.state.equation} \n                    result={this.state.result} \n                />\n                <Keypad onButtonPress={this.onButtonPress} />\n            </main>\n        );\n    }    \n}\n\nexport default Calculator;","import React from 'react';\n\nconst keypadRow = (props) => (\n    <div className=\"keypad__row\">\n        {props.children}\n    </div>\n);\n\nexport default keypadRow;","import React from 'react';\n\nconst button = (props) => {\n    const classes = ['btn'];\n\n    if (typeof props !== 'undefined' && typeof props.type !== 'undefined') {\n        classes.push('btn--' + props.type);\n    }\n\n    return (\n      <button className={classes.join(' ')} onClick={props.onButtonPress}>\n        {props.children}\n      </button>\n    );\n}\n\nexport default button;","import React from 'react';\n\nimport Button from '../Button';\n\nconst largeButton = (props) => (\n    <Button type='large' {...props} />\n);\n\nexport default largeButton;","import React from 'react';\n\nimport KeypadRow from './KeypadRow/KeypadRow';\nimport Button from '../../../components/Button/Button';\nimport LargeButton from '../../../components/Button/LargeButton/LargeButton'\n\nconst keypad = (props) => (\n  <section className=\"keypad\">\n    <KeypadRow>\n      <Button type=\"primary\" onButtonPress={props.onButtonPress}>C</Button>\n      <Button type=\"primary\" onButtonPress={props.onButtonPress}>&larr;</Button>\n      <Button type=\"operator\" onButtonPress={props.onButtonPress}>%</Button>\n      <Button type=\"operator\" onButtonPress={props.onButtonPress}>/</Button>\n    </KeypadRow>\n    \n    <KeypadRow>\n      <Button onButtonPress={props.onButtonPress}>9</Button>\n      <Button onButtonPress={props.onButtonPress}>8</Button>\n      <Button onButtonPress={props.onButtonPress}>7</Button>\n      <Button type=\"operator\" onButtonPress={props.onButtonPress}>*</Button>\n    </KeypadRow>\n    \n    <KeypadRow>\n      <Button onButtonPress={props.onButtonPress}>6</Button>\n      <Button onButtonPress={props.onButtonPress}>5</Button>\n      <Button onButtonPress={props.onButtonPress}>4</Button>\n      <Button type=\"operator\" onButtonPress={props.onButtonPress}>-</Button>\n    </KeypadRow>\n    \n    <KeypadRow>\n      <Button onButtonPress={props.onButtonPress}>3</Button>\n      <Button onButtonPress={props.onButtonPress}>2</Button>\n      <Button onButtonPress={props.onButtonPress}>1</Button>\n      <Button type=\"operator\" onButtonPress={props.onButtonPress}>+</Button>\n    </KeypadRow>\n    \n    <KeypadRow>\n      <Button onButtonPress={props.onButtonPress}>0</Button>\n      <Button onButtonPress={props.onButtonPress}>.</Button>\n      <LargeButton onButtonPress={props.onButtonPress}>=</LargeButton>\n    </KeypadRow>\n  </section>\n);\n\nexport default keypad;","import React from 'react';\n\nconst resultScreen = (props) => (\n    <div className=\"result-screen\">\n        {props.children}\n    </div>\n);\n\nexport default resultScreen;","import React from 'react';\n\nconst computationScreen = (props) => (\n    <div className=\"computation-screen\">\n        {props.children}\n    </div>\n);\n\nexport default computationScreen;","import React from 'react';\n\nimport ResultScreen from './ResultScreen/ResultScreen';\nimport ComputationScreen from './ComputationScreen/ComputationScreen';\n\nconst screen = (props) => (\n    <section className=\"screen\">\n        <ResultScreen>{props.result}</ResultScreen>\n        <ComputationScreen>{props.equation}</ComputationScreen>\n    </section>\n);\n\nexport default screen;","import React from 'react';\nimport './styles/styles.scss';\n\nimport Calculator from './layout/Calculator/Calculator'\n\nconst app = () => (\n    <div className=\"app\">\n      <Calculator />\n    </div>\n);\n\nexport default app;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}